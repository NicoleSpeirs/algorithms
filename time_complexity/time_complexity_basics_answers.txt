1. What is time complexity and what is its relation to algorithms?

Time complexity is a function that measures the time it takes to execute a program. It helps to determine how efficient the algorithm is based on the size of the input.

2. What is runtime?

Runtime determines the physical time duration that it takes to run the algorithm.

3. How is the runtime of an algorithm calculated?

To calculate the runtime, add the instructions the algorithm as a function of the size of its input, then keep the largest term in the expression and drop the constants.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

  Constant Growth: O(1)
  Logarithmic Growth: O(log n)
  Linear Growth: O(n)
  Log-Linear Growth: O(n log n)
  Quadratic Growth: O(n^2)
  Exponential Growth: O(2^n)
  Factorial: O(n!)

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

 Exponential Growth: O(2^n) - one bacteria growth on food that is not refrigerated.

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

Linear Growth: O(n)

7. Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

Quadratic Growth: O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

Exponential Growth: O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?

Linear Growth:  O(n)